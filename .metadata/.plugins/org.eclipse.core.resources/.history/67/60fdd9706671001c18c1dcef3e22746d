Hibernate caching improves the performance of the application by pooling the object in the cache. It is useful when we have to fetch the
same data multiple times.



There are mainly two types of caching:

First Level Cache:-> Session object holds the first level cache data. It is enabled by default. The first level cache data will not be 
available to entire application. An application can use many session object.




Second Level Cache:-> SessionFactory object holds the second level cache data. The data stored in the second level cache will be
available to entire application. But we need to enable it explicitely.

EH (Easy Hibernate) Cache
Swarm Cache
OS Cache
JBoss Cache

First Level Cache:-> let's we have four transactions which are running in parallel and each of these transaction is associated with persistence context of it's 
own.so each of these transaction have a persistence context where all the entities that are being modified during that transaction are 
tracked so transaction one has it's own persistence context transaction.transaction two and three also contains it's own persistence 
context.
so let's say during transaction one and retrieving the details of the same code again and again.let's say we are retrieving the details of
course with id of 1000 three times what would happen is hibernate will not go to the databases all the three times ,first time it would
go to the database and retrieves the details and it will have it inside the persistence context.the next time you ask for the same code 
details hibernate would actually return it back from the persistence context.it will not really talk to the database. it will directly 
pull it from the cash and return it back this is where first level cache comes into the picture.
the first level cache is within the boundry of a single transaction.if you trying to retrieve the same data again the first level cache 
comes into the picture.

The second level cache comes into the picture across multiple transaction.let's say you have one instance of an application deployed on 
a application server or a web server.

